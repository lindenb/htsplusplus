<?xml version="1.0" encoding="UTF-8"?>
<programs>


	<program name="samviewwithmate">
		<short-description>select read and their mate that falls within a region from a <b>query sorted</b> <b>BAM</b></short-description>
		<macro name="version.help"/>
		<macro name="output"/>
		<macro name="reference"/>
		<macro name="bam.output"/>
		<macro name="nthreads"/>
		<option name="inverse" type="bool" short-option='i' long-option="inverse">
			<short-description>inverse logic: keep read where no read in the pair overlap the BED file</short-description>
		</option>
		<option name="bed_file" type="string" short-option='B' long-option="bed" arg-name="BED" required="true">
			<short-description><macro name="what.is.bed"/></short-description>
		</option>
		<code section='validation'>
			/** this is a test */
		</code>
	</program>


	<program name="bcfprune">
		<short-description>Select variants with a fixed distance in a <b>VCF</b> file.</short-description>
		<macro name="version.help"/>
		<macro name="output"/>
		<macro name="bcf.output"/>
		<option name="distance" type="int" short-option='d' long-option="distance" default-value="999">
			<short-description>distance</short-description>
		</option>
	</program>
	

	<program name="bcfconcat">
		<short-description>concatenanate multiple vcf/bcf files</short-description>
        <usage>hts++ bcfconcat in1.bcf in2.vcf.gz in3.vcf
hts++ bcfconcat bcfs.list
cat bcfs.list | hts++ bcfconcat</usage>
		<macro name="version.help"/>
		<macro name="output"/>
		<macro name="bcf.output"/>
        <long-description>
        </long-description>
	</program>
	
	<program name="bcffiltergt">
		<short-description>Select variant using an expression</short-description>
		<macro name="version.help"/>
		<macro name="output"/>
		<macro name="bcf.output"/>
		<option name="soft_filter_name" type="string" short-option='F' long-option="soft-filter" arg-name='FILTER-ID'>
			<short-description>soft FILTER name. (default: filter out variants)</short-description>
		</option>
		<option name="user_expr_str" type="string" short-option='e' long-option="expression" arg-name='expression' >
			<short-description>Expression as string</short-description>
		</option>
		<option name="script_file" type="string" short-option='f' long-option="file-expression" arg-name='FILE' >
			<short-description>Expression as file</short-description>
		</option>
	
	</program>
	
	<program name="tests">
		<short-description>peforms some tests</short-description>
		<macro name="version.help"/>
		<option name="datadirectory" type="string" short-option='D' long-option="directory" arg-name="DIR" required="true">
			<short-description>test directory</short-description>
		</option>
	</program>
</programs>
